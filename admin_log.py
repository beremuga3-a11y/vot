"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω –∂—É—Ä–Ω–∞–ª–æ–º
"""
import sqlite3
import time
from typing import List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram import InputMediaPhoto

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –æ–±—â–µ–≥–æ –º–æ–¥—É–ª—è
from common import IMAGES


def get_admin_logs(limit: int = 20) -> List[sqlite3.Row]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∞–¥–º–∏–Ω –∂—É—Ä–Ω–∞–ª–∞"""
    from common import cur
    cur.execute(
        "SELECT user_id, action, ts FROM admin_logs ORDER BY ts DESC LIMIT ?",
        (limit,)
    )
    return cur.fetchall()


def get_admin_logs_by_user(user_id: int, limit: int = 20) -> List[sqlite3.Row]:
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∂—É—Ä–Ω–∞–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from common import cur
    cur.execute(
        "SELECT user_id, action, ts FROM admin_logs WHERE user_id = ? ORDER BY ts DESC LIMIT ?",
        (user_id, limit)
    )
    return cur.fetchall()


def get_admin_logs_stats() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω –∂—É—Ä–Ω–∞–ª–∞"""
    from common import cur
    cur.execute("SELECT COUNT(*) as count FROM admin_logs")
    total_logs = cur.fetchone()["count"]
    
    cur.execute("SELECT COUNT(DISTINCT user_id) as count FROM admin_logs")
    unique_users = cur.fetchone()["count"]
    
    cur.execute("SELECT action, COUNT(*) as count FROM admin_logs GROUP BY action ORDER BY count DESC LIMIT 5")
    top_actions = cur.fetchall()
    
    return {
        "total_logs": total_logs,
        "unique_users": unique_users,
        "top_actions": top_actions
    }


async def admin_view_logs(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –∂—É—Ä–Ω–∞–ª"""
    from common import is_admin, edit_section, chunk_buttons
    if not is_admin(query.from_user.id):
        await edit_section(query, caption="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", image_key="admin")
        return
    
    rows = get_admin_logs()
    if not rows:
        txt = "üìú –ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç."
    else:
        txt = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–æ–≤:\n"
        for row in rows:
            t = time.strftime("%d.%m %H:%M", time.localtime(row["ts"]))
            txt += f"[{t}] ID {row['user_id']}: {row['action']}\n"
    
    btns = [
        InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ ID", callback_data="admin_logs_search"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_logs_stats"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin"),
    ]
    
    await edit_section(
        query,
        caption=txt,
        image_key="logs",
        reply_markup=InlineKeyboardMarkup(chunk_buttons(btns, per_row=2)),
    )


async def admin_logs_search(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∏—Å–∫ –≤ –∞–¥–º–∏–Ω –∂—É—Ä–Ω–∞–ª–µ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(query.from_user.id):
        await edit_section(query, caption="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", image_key="admin")
        return
    
    context.user_data["awaiting_logs_search"] = True
    await edit_section(
        query,
        caption="üîç –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∂—É—Ä–Ω–∞–ª–µ:",
        image_key="logs",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_view_logs")]]
        ),
    )


async def admin_logs_stats(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω –∂—É—Ä–Ω–∞–ª–∞"""
    if not is_admin(query.from_user.id):
        await edit_section(query, caption="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", image_key="admin")
        return
    
    stats = get_admin_logs_stats()
    
    txt = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂—É—Ä–Ω–∞–ª–∞:\n\n"
    txt += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_logs']}\n"
    txt += f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unique_users']}\n\n"
    txt += "–¢–æ–ø-5 –¥–µ–π—Å—Ç–≤–∏–π:\n"
    for action in stats['top_actions']:
        txt += f"‚Ä¢ {action['action']}: {action['count']} —Ä–∞–∑\n"
    
    await edit_section(
        query,
        caption=txt,
        image_key="logs",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_view_logs")]]
        ),
    )


async def handle_logs_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∂—É—Ä–Ω–∞–ª–µ"""
    if not context.user_data.get("awaiting_logs_search"):
        return
    
    try:
        user_id = int(update.message.text.strip())
        rows = get_admin_logs_by_user(user_id)
        
        if not rows:
            txt = f"üìú –ó–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            txt = f"üìú –ó–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}:\n"
            for row in rows:
                t = time.strftime("%d.%m %H:%M", time.localtime(row["ts"]))
                txt += f"[{t}] {row['action']}\n"
        
        btns = [
            InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="admin_logs_search"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∂—É—Ä–Ω–∞–ª—É", callback_data="admin_view_logs"),
        ]
        
        await update.message.reply_photo(
            photo=IMAGES.get("logs", "https://i.postimg.cc/fb1TQF6W/5355070803995131046.jpg"),
            caption=txt,
            reply_markup=InlineKeyboardMarkup(chunk_buttons(btns, per_row=2)),
        )
        
        context.user_data["awaiting_logs_search"] = False
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        context.user_data["awaiting_logs_search"] = False