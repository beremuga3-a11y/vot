"""
–ê–¥–º–∏–Ω –∂—É—Ä–Ω–∞–ª - –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∂—É—Ä–Ω–∞–ª–æ–º –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""

import time
import sqlite3
from typing import List, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from main import _execute, cur, edit_section, chunk_buttons, is_admin


async def admin_logs_view(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∂—É—Ä–Ω–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    if not is_admin(query.from_user.id):
        await edit_section(query, caption="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", image_key="admin")
        return
    
    cur.execute(
        "SELECT user_id, action, ts FROM admin_logs ORDER BY ts DESC LIMIT 20"
    )
    rows = cur.fetchall()
    
    if not rows:
        txt = "üìú –ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç."
    else:
        txt = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–æ–≤:\n"
        for row in rows:
            t = time.strftime("%d.%m %H:%M", time.localtime(row["ts"]))
            txt += f"[{t}] ID {row['user_id']}: {row['action']}\n"
    
    btns = [
        InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ ID", callback_data="admin_logs_search"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_logs_stats"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin"),
    ]
    
    await edit_section(
        query,
        caption=txt,
        image_key="logs",
        reply_markup=InlineKeyboardMarkup(chunk_buttons(btns, per_row=2)),
    )


async def admin_logs_search(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∏—Å–∫ –≤ –∂—É—Ä–Ω–∞–ª–µ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not is_admin(query.from_user.id):
        await edit_section(query, caption="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", image_key="admin")
        return
    
    context.user_data["awaiting_logs_search"] = True
    await edit_section(
        query,
        caption="üîç –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∂—É—Ä–Ω–∞–ª–µ:",
        image_key="logs",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_view_logs")]]
        ),
    )


async def admin_logs_stats(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂—É—Ä–Ω–∞–ª–∞."""
    if not is_admin(query.from_user.id):
        await edit_section(query, caption="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", image_key="admin")
        return
    
    cur.execute("SELECT COUNT(*) as count FROM admin_logs")
    total_logs = cur.fetchone()["count"]
    cur.execute("SELECT COUNT(DISTINCT user_id) as count FROM admin_logs")
    unique_users = cur.fetchone()["count"]
    cur.execute("SELECT action, COUNT(*) as count FROM admin_logs GROUP BY action ORDER BY count DESC LIMIT 5")
    top_actions = cur.fetchall()
    
    txt = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂—É—Ä–Ω–∞–ª–∞:\n\n"
    txt += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_logs}\n"
    txt += f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}\n\n"
    txt += "–¢–æ–ø-5 –¥–µ–π—Å—Ç–≤–∏–π:\n"
    for action in top_actions:
        txt += f"‚Ä¢ {action['action']}: {action['count']} —Ä–∞–∑\n"
    
    await edit_section(
        query,
        caption=txt,
        image_key="logs",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_view_logs")]]
        ),
    )


async def handle_logs_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∂—É—Ä–Ω–∞–ª–µ."""
    if not context.user_data.get("awaiting_logs_search"):
        return
    
    txt = update.message.text.strip()
    if not txt.isdigit():
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    user_id = int(txt)
    cur.execute(
        "SELECT action, ts FROM admin_logs WHERE user_id = ? ORDER BY ts DESC LIMIT 20",
        (user_id,)
    )
    rows = cur.fetchall()
    
    if not rows:
        await update.message.reply_text(f"‚ùå –î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∂—É—Ä–Ω–∞–ª–µ.")
        context.user_data["awaiting_logs_search"] = False
        return
    
    txt_result = f"üìú –î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n"
    for row in rows:
        t = time.strftime("%d.%m %H:%M", time.localtime(row["ts"]))
        txt_result += f"[{t}] {row['action']}\n"
    
    await update.message.reply_text(txt_result)
    context.user_data["awaiting_logs_search"] = False


def log_admin_action(user_id: int, action: str) -> None:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∂—É—Ä–Ω–∞–ª."""
    _execute(
        "INSERT INTO admin_logs (user_id, action, ts) VALUES (?, ?, ?)",
        (user_id, action, int(time.time()))
    )


def get_admin_logs_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∂—É—Ä–Ω–∞–ª–∞."""
    cur.execute("SELECT COUNT(*) as count FROM admin_logs")
    total_logs = cur.fetchone()["count"]
    
    cur.execute("SELECT COUNT(DISTINCT user_id) as count FROM admin_logs")
    unique_users = cur.fetchone()["count"]
    
    cur.execute("SELECT action, COUNT(*) as count FROM admin_logs GROUP BY action ORDER BY count DESC LIMIT 5")
    top_actions = cur.fetchall()
    
    return {
        "total_logs": total_logs,
        "unique_users": unique_users,
        "top_actions": top_actions
    }