"""
–û—Å–µ–Ω–Ω–∏–π –ø–æ—Ä—Ç–∞–ª - –º–æ–¥—É–ª—å –¥–ª—è –æ—Å–µ–Ω–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –∏–≥—Ä–∞–º–∏, –º–∞–≥–∞–∑–∏–Ω–æ–º –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏
"""

import time
import random
import sqlite3
from typing import List, Dict, Any, Tuple
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from main import (
    _execute, cur, edit_section, chunk_buttons, format_num, 
    get_user, update_user, log_user_action, AUTUMN_FOOD_PRICE,
    AUTUMN_EVENT_IMG, IMAGES
)


# –û—Å–µ–Ω–Ω–∏–µ –∏–≥—Ä—ã
AUTUMN_GAMES = [
    {
        "name": "üçÇ –£–≥–∞–¥–∞–π –ª–∏—Å—Ç",
        "description": "–£–≥–∞–¥–∞–π—Ç–µ —Ü–≤–µ—Ç –æ—Å–µ–Ω–Ω–µ–≥–æ –ª–∏—Å—Ç–∞",
        "cost": 1000,
        "reward": 2000,
        "callback": "autumn_game_leaf"
    },
    {
        "name": "üéÉ –¢—ã–∫–≤–µ–Ω–Ω–∞—è –æ—Ö–æ—Ç–∞",
        "description": "–ù–∞–π–¥–∏—Ç–µ —Å–ø—Ä—è—Ç–∞–Ω–Ω—É—é —Ç—ã–∫–≤—É",
        "cost": 1500,
        "reward": 3000,
        "callback": "autumn_game_pumpkin"
    },
    {
        "name": "üçÑ –ì—Ä–∏–±–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞",
        "description": "–°–æ–±–µ—Ä–∏—Ç–µ –≥—Ä–∏–±—ã –≤ –∫–æ—Ä–∑–∏–Ω—É",
        "cost": 2000,
        "reward": 4000,
        "callback": "autumn_game_mushroom"
    },
    {
        "name": "üå∞ –û—Ä–µ—Ö–æ–≤–∞—è –∑–∞–≥–∞–¥–∫–∞",
        "description": "–†–∞–∑–≥–∞–¥–∞–π—Ç–µ –∑–∞–≥–∞–¥–∫—É –æ–± –æ—Ä–µ—Ö–∞—Ö",
        "cost": 2500,
        "reward": 5000,
        "callback": "autumn_game_nut"
    },
    {
        "name": "üçÅ –õ–∏—Å—Ç–æ–ø–∞–¥",
        "description": "–ü–æ–π–º–∞–π—Ç–µ –ø–∞–¥–∞—é—â–∏–µ –ª–∏—Å—Ç—å—è",
        "cost": 3000,
        "reward": 6000,
        "callback": "autumn_game_leaves"
    },
    {
        "name": "ü¶å –û–ª–µ–Ω—å—è —Ç—Ä–æ–ø–∞",
        "description": "–ü–æ–º–æ–≥–∏—Ç–µ –æ–ª–µ–Ω—é –Ω–∞–π—Ç–∏ –ø—É—Ç—å",
        "cost": 4000,
        "reward": 8000,
        "callback": "autumn_game_deer"
    },
    {
        "name": "üåæ –£—Ä–æ–∂–∞–π –∑–µ—Ä–Ω–∞",
        "description": "–°–æ–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∂–∞–π –ø—à–µ–Ω–∏—Ü—ã",
        "cost": 5000,
        "reward": 10000,
        "callback": "autumn_game_wheat"
    },
    {
        "name": "üçé –Ø–±–ª–æ—á–Ω—ã–π —Å–∞–¥",
        "description": "–°–æ–±–µ—Ä–∏—Ç–µ —Å–ø–µ–ª—ã–µ —è–±–ª–æ–∫–∏",
        "cost": 6000,
        "reward": 12000,
        "callback": "autumn_game_apple"
    },
    {
        "name": "üå∞ –ë–µ–ª–∏—á—å—è –æ—Ö–æ—Ç–∞",
        "description": "–ü–æ–º–æ–≥–∏—Ç–µ –±–µ–ª–∫–µ –Ω–∞–π—Ç–∏ –æ—Ä–µ—Ö–∏",
        "cost": 7000,
        "reward": 14000,
        "callback": "autumn_game_squirrel"
    },
    {
        "name": "üçÇ –û—Å–µ–Ω–Ω–∏–π –≤–µ—Ç–µ—Ä",
        "description": "–£–≥–∞–¥–∞–π—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞",
        "cost": 8000,
        "reward": 16000,
        "callback": "autumn_game_wind"
    },
    {
        "name": "ü¶Ö –û—Ä–ª–∏–Ω—ã–π –ø–æ–ª–µ—Ç",
        "description": "–ü–æ–º–æ–≥–∏—Ç–µ –æ—Ä–ª—É –Ω–∞–π—Ç–∏ –¥–æ–±—ã—á—É",
        "cost": 10000,
        "reward": 20000,
        "callback": "autumn_game_eagle"
    },
    {
        "name": "üåô –û—Å–µ–Ω–Ω—è—è –Ω–æ—á—å",
        "description": "–ù–∞–π–¥–∏—Ç–µ —Å–æ–∑–≤–µ–∑–¥–∏—è –Ω–∞ –Ω–µ–±–µ",
        "cost": 12000,
        "reward": 24000,
        "callback": "autumn_game_stars"
    }
]

# –û—Å–µ–Ω–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω
AUTUMN_SHOP = [
    {
        "name": "üçÇ –û—Å–µ–Ω–Ω–∏–π –∫–æ—Ä–º",
        "description": "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ—Ä–º –¥–ª—è –æ—Å–µ–Ω–Ω–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤",
        "price": 1000,
        "type": "feed",
        "callback": "buy_autumn_feed"
    },
    {
        "name": "üéÉ –¢—ã–∫–≤–µ–Ω–Ω–∞—è –º–∞—Å–∫–∞",
        "description": "–ú–∞—Å–∫–∞ –¥–ª—è –•—ç–ª–ª–æ—É–∏–Ω–∞ (+5% –∫ –¥–æ—Ö–æ–¥—É)",
        "price": 5000,
        "type": "mask",
        "callback": "buy_autumn_mask"
    },
    {
        "name": "üçÑ –ì—Ä–∏–±–Ω–æ–π —Å—É–ø",
        "description": "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –ø–∏—Ç–æ–º—Ü–µ–≤",
        "price": 3000,
        "type": "soup",
        "callback": "buy_autumn_soup"
    },
    {
        "name": "üå∞ –û—Ä–µ—Ö–æ–≤—ã–π —Ç–æ—Ä—Ç",
        "description": "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–∞—Å—Ç—å–µ –ø–∏—Ç–æ–º—Ü–µ–≤",
        "price": 4000,
        "type": "cake",
        "callback": "buy_autumn_cake"
    },
    {
        "name": "üçÅ –û—Å–µ–Ω–Ω–∏–π –≤–µ–Ω–æ–∫",
        "description": "–£–∫—Ä–∞—à–µ–Ω–∏–µ –¥–ª—è —Ñ–µ—Ä–º—ã (+3% –∫ –¥–æ—Ö–æ–¥—É)",
        "price": 7000,
        "type": "wreath",
        "callback": "buy_autumn_wreath"
    },
    {
        "name": "ü¶å –†–æ–≥–∞ –æ–ª–µ–Ω—è",
        "description": "–†–µ–¥–∫–∏–π –∞–∫—Å–µ—Å—Å—É–∞—Ä (+10% –∫ –¥–æ—Ö–æ–¥—É)",
        "price": 15000,
        "type": "antlers",
        "callback": "buy_autumn_antlers"
    }
]


async def autumn_portal_menu(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Å–µ–Ω–Ω–µ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞."""
    uid = query.from_user.id
    user = get_user(uid)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
    cur.execute("SELECT autumn_event_active FROM global_settings WHERE id = 1")
    active = cur.fetchone()["autumn_event_active"]
    
    if not active:
        await edit_section(
            query,
            caption="üçÇ –û—Å–µ–Ω–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
            ),
        )
        return
    
    text = (
        f"üçÇ –û—Å–µ–Ω–Ω–∏–π –ø–æ—Ä—Ç–∞–ª\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Å–µ–Ω–Ω–µ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!\n"
        f"–£ –≤–∞—Å {user['autumn_feed']} –æ—Å–µ–Ω–Ω–µ–≥–æ –∫–æ—Ä–º–∞\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    )
    
    btns = [
        InlineKeyboardButton("üéÆ –û—Å–µ–Ω–Ω–∏–µ –∏–≥—Ä—ã", callback_data="autumn_games"),
        InlineKeyboardButton("üõí –û—Å–µ–Ω–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω", callback_data="autumn_shop"),
        InlineKeyboardButton("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã", callback_data="autumn_daily"),
        InlineKeyboardButton("üîÑ –û–±–º–µ–Ω –º–æ–Ω–µ—Ç", callback_data="autumn_exchange"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="autumn_stats"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
    ]
    
    await edit_section(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(chunk_buttons(btns, per_row=2)),
    )


async def autumn_games_menu(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é –æ—Å–µ–Ω–Ω–∏—Ö –∏–≥—Ä."""
    uid = query.from_user.id
    user = get_user(uid)
    
    text = "üéÆ –û—Å–µ–Ω–Ω–∏–µ –∏–≥—Ä—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:"
    
    btns = []
    for game in AUTUMN_GAMES:
        btns.append(
            InlineKeyboardButton(
                f"{game['name']} ({format_num(game['cost'])}ü™ô)",
                callback_data=game['callback']
            )
        )
    
    btns.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_portal"))
    
    await edit_section(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(chunk_buttons(btns, per_row=1)),
    )


async def autumn_game_leaf(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π –ª–∏—Å—Ç'."""
    uid = query.from_user.id
    user = get_user(uid)
    
    if user["coins"] < 1000:
        await edit_section(
            query,
            caption="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ 1000ü™ô.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_games")]]
            ),
        )
        return
    
    # –ò–≥—Ä–∞: —É–≥–∞–¥–∞—Ç—å —Ü–≤–µ—Ç –ª–∏—Å—Ç–∞
    colors = ["–∫—Ä–∞—Å–Ω—ã–π", "–∂–µ–ª—Ç—ã–π", "–æ—Ä–∞–Ω–∂–µ–≤—ã–π", "–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π"]
    correct_color = random.choice(colors)
    
    text = (
        f"üçÇ –£–≥–∞–¥–∞–π –ª–∏—Å—Ç\n\n"
        f"–ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –æ—Å–µ–Ω–Ω–∏–π –ª–∏—Å—Ç?\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(colors)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç:"
    )
    
    context.user_data["autumn_game"] = {
        "type": "leaf",
        "correct": correct_color,
        "cost": 1000,
        "reward": 2000
    }
    
    await edit_section(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="autumn_games")]]
        ),
    )


async def autumn_game_pumpkin(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–≥—Ä–∞ '–¢—ã–∫–≤–µ–Ω–Ω–∞—è –æ—Ö–æ—Ç–∞'."""
    uid = query.from_user.id
    user = get_user(uid)
    
    if user["coins"] < 1500:
        await edit_section(
            query,
            caption="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ 1500ü™ô.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_games")]]
            ),
        )
        return
    
    # –ò–≥—Ä–∞: –Ω–∞–π—Ç–∏ —Ç—ã–∫–≤—É
    positions = ["–ª–µ—Å", "—Å–∞–¥", "–ø–æ–ª–µ", "–¥–æ–º"]
    correct_position = random.choice(positions)
    
    text = (
        f"üéÉ –¢—ã–∫–≤–µ–Ω–Ω–∞—è –æ—Ö–æ—Ç–∞\n\n"
        f"–ì–¥–µ —Å–ø—Ä—è—Ç–∞–Ω–∞ —Ç—ã–∫–≤–∞?\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(positions)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ:"
    )
    
    context.user_data["autumn_game"] = {
        "type": "pumpkin",
        "correct": correct_position,
        "cost": 1500,
        "reward": 3000
    }
    
    await edit_section(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="autumn_games")]]
        ),
    )


async def autumn_game_mushroom(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–≥—Ä–∞ '–ì—Ä–∏–±–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞'."""
    uid = query.from_user.id
    user = get_user(uid)
    
    if user["coins"] < 2000:
        await edit_section(
            query,
            caption="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ 2000ü™ô.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_games")]]
            ),
        )
        return
    
    # –ò–≥—Ä–∞: —Å–æ–±—Ä–∞—Ç—å –≥—Ä–∏–±—ã
    mushrooms = ["–±–µ–ª—ã–π", "–ø–æ–¥–±–µ—Ä–µ–∑–æ–≤–∏–∫", "–ª–∏—Å–∏—á–∫–∞", "–æ–ø–µ–Ω–æ–∫"]
    correct_mushroom = random.choice(mushrooms)
    
    text = (
        f"üçÑ –ì—Ä–∏–±–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞\n\n"
        f"–ö–∞–∫–æ–π –≥—Ä–∏–± –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å?\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(mushrooms)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≥—Ä–∏–±:"
    )
    
    context.user_data["autumn_game"] = {
        "type": "mushroom",
        "correct": correct_mushroom,
        "cost": 2000,
        "reward": 4000
    }
    
    await edit_section(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="autumn_games")]]
        ),
    )


async def autumn_game_nut(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–≥—Ä–∞ '–û—Ä–µ—Ö–æ–≤–∞—è –∑–∞–≥–∞–¥–∫–∞'."""
    uid = query.from_user.id
    user = get_user(uid)
    
    if user["coins"] < 2500:
        await edit_section(
            query,
            caption="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ 2500ü™ô.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_games")]]
            ),
        )
        return
    
    # –ò–≥—Ä–∞: –∑–∞–≥–∞–¥–∫–∞ –æ–± –æ—Ä–µ—Ö–∞—Ö
    riddles = [
        ("–ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç –Ω–∞ –¥—É–±–µ?", "–∂–µ–ª—É–¥—å"),
        ("–ö–∞–∫–æ–π –æ—Ä–µ—Ö —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π?", "–∫–æ–∫–æ—Å"),
        ("–ß—Ç–æ –µ–¥—è—Ç –±–µ–ª–∫–∏?", "–æ—Ä–µ—Ö–∏"),
        ("–ö–∞–∫–æ–π –æ—Ä–µ—Ö –∑–µ–ª–µ–Ω—ã–π?", "—Ñ–∏—Å—Ç–∞—à–∫–∞")
    ]
    
    riddle, answer = random.choice(riddles)
    
    text = (
        f"üå∞ –û—Ä–µ—Ö–æ–≤–∞—è –∑–∞–≥–∞–¥–∫–∞\n\n"
        f"–ó–∞–≥–∞–¥–∫–∞: {riddle}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:"
    )
    
    context.user_data["autumn_game"] = {
        "type": "nut",
        "correct": answer,
        "cost": 2500,
        "reward": 5000
    }
    
    await edit_section(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="autumn_games")]]
        ),
    )


async def autumn_game_leaves(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–≥—Ä–∞ '–õ–∏—Å—Ç–æ–ø–∞–¥'."""
    uid = query.from_user.id
    user = get_user(uid)
    
    if user["coins"] < 3000:
        await edit_section(
            query,
            caption="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ 3000ü™ô.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_games")]]
            ),
        )
        return
    
    # –ò–≥—Ä–∞: –ø–æ–π–º–∞—Ç—å –ª–∏—Å—Ç—å—è
    leaves = ["–∫–ª–µ–Ω–æ–≤—ã–π", "–¥—É–±–æ–≤—ã–π", "–±–µ—Ä–µ–∑–æ–≤—ã–π", "—Ä—è–±–∏–Ω–æ–≤—ã–π"]
    correct_leaf = random.choice(leaves)
    
    text = (
        f"üçÅ –õ–∏—Å—Ç–æ–ø–∞–¥\n\n"
        f"–ö–∞–∫–æ–π –ª–∏—Å—Ç –Ω—É–∂–Ω–æ –ø–æ–π–º–∞—Ç—å?\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(leaves)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –ª–∏—Å—Ç:"
    )
    
    context.user_data["autumn_game"] = {
        "type": "leaves",
        "correct": correct_leaf,
        "cost": 3000,
        "reward": 6000
    }
    
    await edit_section(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="autumn_games")]]
        ),
    )


async def autumn_game_deer(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–≥—Ä–∞ '–û–ª–µ–Ω—å—è —Ç—Ä–æ–ø–∞'."""
    uid = query.from_user.id
    user = get_user(uid)
    
    if user["coins"] < 4000:
        await edit_section(
            query,
            caption="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ 4000ü™ô.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_games")]]
            ),
        )
        return
    
    # –ò–≥—Ä–∞: –ø–æ–º–æ—á—å –æ–ª–µ–Ω—é
    paths = ["–ª–µ—Å–Ω–∞—è", "–≥–æ—Ä–Ω–∞—è", "—Ä–µ—á–Ω–∞—è", "–ª—É–≥–æ–≤–∞—è"]
    correct_path = random.choice(paths)
    
    text = (
        f"ü¶å –û–ª–µ–Ω—å—è —Ç—Ä–æ–ø–∞\n\n"
        f"–ü–æ –∫–∞–∫–æ–π —Ç—Ä–æ–ø–µ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –æ–ª–µ–Ω—å?\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(paths)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–æ–ø—É:"
    )
    
    context.user_data["autumn_game"] = {
        "type": "deer",
        "correct": correct_path,
        "cost": 4000,
        "reward": 8000
    }
    
    await edit_section(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="autumn_games")]]
        ),
    )


async def autumn_shop_menu(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é –æ—Å–µ–Ω–Ω–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞."""
    uid = query.from_user.id
    user = get_user(uid)
    
    text = "üõí –û—Å–µ–Ω–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
    
    btns = []
    for item in AUTUMN_SHOP:
        btns.append(
            InlineKeyboardButton(
                f"{item['name']} ({format_num(item['price'])}ü™ô)",
                callback_data=item['callback']
            )
        )
    
    btns.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_portal"))
    
    await edit_section(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(chunk_buttons(btns, per_row=1)),
    )


async def autumn_daily_section(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
    uid = query.from_user.id
    user = get_user(uid)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É —Å sqlite3.Row - –∏—Å–ø–æ–ª—å–∑—É–µ–º try/except
    try:
        last_daily = user["last_autumn_daily"]
    except (KeyError, IndexError):
        last_daily = 0
    
    now = int(time.time())
    daily_cooldown = 86400  # 24 —á–∞—Å–∞
    
    if now - last_daily < daily_cooldown:
        left = daily_cooldown - (now - last_daily)
        hours = left // 3600
        minutes = (left % 3600) // 60
        
        await edit_section(
            query,
            caption=f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã\n\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_portal")]]
            ),
        )
        return
    
    # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
    reward_coins = random.randint(1000, 5000)
    reward_feed = random.randint(1, 3)
    
    update_user(
        uid,
        coins=user["coins"] + reward_coins,
        autumn_feed=user["autumn_feed"] + reward_feed,
        last_autumn_daily=now
    )
    
    log_user_action(uid, f"–ü–æ–ª—É—á–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Å–µ–Ω–Ω—é—é –Ω–∞–≥—Ä–∞–¥—É: {reward_coins}ü™ô + {reward_feed} –∫–æ—Ä–º–∞")
    
    await edit_section(
        query,
        caption=(
            f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"üí∞ –ú–æ–Ω–µ—Ç—ã: +{format_num(reward_coins)}ü™ô\n"
            f"üçÇ –û—Å–µ–Ω–Ω–∏–π –∫–æ—Ä–º: +{reward_feed}\n\n"
            f"–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π!"
        ),
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_portal")]]
        ),
    )


async def autumn_exchange(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±–º–µ–Ω –º–æ–Ω–µ—Ç –Ω–∞ –æ—Å–µ–Ω–Ω–∏–µ –º–æ–Ω–µ—Ç—ã."""
    uid = query.from_user.id
    user = get_user(uid)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–µ–Ω–Ω–∏–µ –º–æ–Ω–µ—Ç—ã, –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
    try:
        autumn_coins = user["autumn_coins"]
    except (KeyError, IndexError):
        autumn_coins = 0
    
    text = (
        f"üîÑ –û–±–º–µ–Ω –º–æ–Ω–µ—Ç\n\n"
        f"–£ –≤–∞—Å: {format_num(user['coins'])}ü™ô\n"
        f"–û—Å–µ–Ω–Ω–∏—Ö –º–æ–Ω–µ—Ç: {autumn_coins}üçÇ\n\n"
        f"–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: 1ü™ô = 1 –æ—Å–µ–Ω–Ω—è—è –º–æ–Ω–µ—Ç–∞\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞:"
    )
    
    context.user_data["awaiting_autumn_exchange"] = True
    
    await edit_section(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="autumn_portal")]]
        ),
    )


async def autumn_stats(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
    uid = query.from_user.id
    user = get_user(uid)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–µ–Ω–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
    try:
        autumn_coins = user["autumn_coins"]
    except (KeyError, IndexError):
        autumn_coins = 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
    cur.execute("SELECT COUNT(*) as count FROM admin_logs WHERE user_id = ? AND action LIKE '%–æ—Å–µ–Ω–Ω%'", (uid,))
    autumn_actions = cur.fetchone()["count"]
    
    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è\n\n"
        f"üçÇ –û—Å–µ–Ω–Ω–∏–π –∫–æ—Ä–º: {user['autumn_feed']}\n"
        f"üçÇ –û—Å–µ–Ω–Ω–∏–µ –º–æ–Ω–µ—Ç—ã: {autumn_coins}\n"
        f"üí∞ –û–±—ã—á–Ω—ã–µ –º–æ–Ω–µ—Ç—ã: {format_num(user['coins'])}\n"
        f"üéÆ –û—Å–µ–Ω–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π: {autumn_actions}\n\n"
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: "
    )
    
    try:
        if user["last_autumn_daily"]:
            last_daily = time.strftime("%d.%m.%Y %H:%M", time.localtime(user["last_autumn_daily"]))
            text += last_daily
        else:
            text += "–ù–∏–∫–æ–≥–¥–∞"
    except (KeyError, IndexError):
        text += "–ù–∏–∫–æ–≥–¥–∞"
    
    await edit_section(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_portal")]]
        ),
    )


async def handle_autumn_game_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –æ—Å–µ–Ω–Ω–∏—Ö –∏–≥—Ä–∞—Ö."""
    if not context.user_data.get("autumn_game"):
        return
    
    game_data = context.user_data["autumn_game"]
    user_input = update.message.text.strip().lower()
    correct_answer = game_data["correct"].lower()
    
    uid = update.effective_user.id
    user = get_user(uid)
    
    if user_input == correct_answer:
        # –í—ã–∏–≥—Ä—ã—à
        reward = game_data["reward"]
        update_user(uid, coins=user["coins"] + reward)
        log_user_action(uid, f"–í—ã–∏–≥—Ä–∞–ª –≤ –æ—Å–µ–Ω–Ω–µ–π –∏–≥—Ä–µ {game_data['type']}: {reward}ü™ô")
        
        await update.message.reply_text(
            f"üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {format_num(reward)}ü™ô!"
        )
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        cost = game_data["cost"]
        update_user(uid, coins=user["coins"] - cost)
        log_user_action(uid, f"–ü—Ä–æ–∏–≥—Ä–∞–ª –≤ –æ—Å–µ–Ω–Ω–µ–π –∏–≥—Ä–µ {game_data['type']}: {cost}ü™ô")
        
        await update.message.reply_text(
            f"üíî –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {game_data['correct']}\n"
            f"–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {format_num(cost)}ü™ô"
        )
    
    context.user_data.pop("autumn_game", None)


async def handle_autumn_exchange_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–º–µ–Ω–∞ –º–æ–Ω–µ—Ç."""
    if not context.user_data.get("awaiting_autumn_exchange"):
        return
    
    txt = update.message.text.strip()
    if not txt.isdigit():
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    amount = int(txt)
    uid = update.effective_user.id
    user = get_user(uid)
    
    if amount <= 0:
        await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return
    
    if user["coins"] < amount:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Å–µ–Ω–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
    try:
        current_autumn_coins = user["autumn_coins"]
    except (KeyError, IndexError):
        current_autumn_coins = 0
    
    update_user(
        uid,
        coins=user["coins"] - amount,
        autumn_coins=current_autumn_coins + amount
    )
    
    log_user_action(uid, f"–û–±–º–µ–Ω—è–ª {amount}ü™ô –Ω–∞ –æ—Å–µ–Ω–Ω–∏–µ –º–æ–Ω–µ—Ç—ã")
    
    await update.message.reply_text(
        f"‚úÖ –û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ {amount} –æ—Å–µ–Ω–Ω–∏—Ö –º–æ–Ω–µ—ÇüçÇ."
    )
    
    context.user_data["awaiting_autumn_exchange"] = False


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ—Å–µ–Ω–Ω–µ–º –º–∞–≥–∞–∑–∏–Ω–µ
async def buy_autumn_feed(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫—É–ø–∫–∞ –æ—Å–µ–Ω–Ω–µ–≥–æ –∫–æ—Ä–º–∞."""
    uid = query.from_user.id
    user = get_user(uid)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–µ–Ω–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
    try:
        autumn_coins = user["autumn_coins"]
    except (KeyError, IndexError):
        autumn_coins = 0
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã
    text = (
        f"üçÇ –û—Å–µ–Ω–Ω–∏–π –∫–æ—Ä–º\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {format_num(AUTUMN_FOOD_PRICE)}ü™ô –∏–ª–∏ {AUTUMN_FOOD_PRICE}üçÇ\n\n"
        f"–£ –≤–∞—Å:\n"
        f"üí∞ –û–±—ã—á–Ω—ã–µ –º–æ–Ω–µ—Ç—ã: {format_num(user['coins'])}ü™ô\n"
        f"üçÇ –û—Å–µ–Ω–Ω–∏–µ –º–æ–Ω–µ—Ç—ã: {autumn_coins}üçÇ\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    )
    
    btns = []
    if user["coins"] >= AUTUMN_FOOD_PRICE:
        btns.append(InlineKeyboardButton("üí∞ –ó–∞ –æ–±—ã—á–Ω—ã–µ –º–æ–Ω–µ—Ç—ã", callback_data="buy_autumn_feed_normal"))
    if autumn_coins >= AUTUMN_FOOD_PRICE:
        btns.append(InlineKeyboardButton("üçÇ –ó–∞ –æ—Å–µ–Ω–Ω–∏–µ –º–æ–Ω–µ—Ç—ã", callback_data="buy_autumn_feed_autumn"))
    
    btns.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_shop"))
    
    await edit_section(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(chunk_buttons(btns, per_row=1)),
    )


async def buy_autumn_feed_normal(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫—É–ø–∫–∞ –æ—Å–µ–Ω–Ω–µ–≥–æ –∫–æ—Ä–º–∞ –∑–∞ –æ–±—ã—á–Ω—ã–µ –º–æ–Ω–µ—Ç—ã."""
    uid = query.from_user.id
    user = get_user(uid)
    
    if user["coins"] < AUTUMN_FOOD_PRICE:
        await edit_section(
            query,
            caption=f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ {format_num(AUTUMN_FOOD_PRICE)}ü™ô.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_shop")]]
            ),
        )
        return
    
    update_user(
        uid,
        coins=user["coins"] - AUTUMN_FOOD_PRICE,
        autumn_feed=user["autumn_feed"] + 1,
        weekly_coins=user["weekly_coins"] + AUTUMN_FOOD_PRICE,
    )
    
    log_user_action(uid, f"–ö—É–ø–∏–ª –æ—Å–µ–Ω–Ω–∏–π –∫–æ—Ä–º –∑–∞ {AUTUMN_FOOD_PRICE}ü™ô")
    
    await edit_section(
        query,
        caption=f"‚úÖ +1 –æ—Å–µ–Ω–Ω–∏–π –∫–æ—Ä–º –∑–∞ {format_num(AUTUMN_FOOD_PRICE)}ü™ô.",
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_shop")]]
        ),
    )


async def buy_autumn_feed_autumn(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫—É–ø–∫–∞ –æ—Å–µ–Ω–Ω–µ–≥–æ –∫–æ—Ä–º–∞ –∑–∞ –æ—Å–µ–Ω–Ω–∏–µ –º–æ–Ω–µ—Ç—ã."""
    uid = query.from_user.id
    user = get_user(uid)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–µ–Ω–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
    try:
        autumn_coins = user["autumn_coins"]
    except (KeyError, IndexError):
        autumn_coins = 0
    
    if autumn_coins < AUTUMN_FOOD_PRICE:
        await edit_section(
            query,
            caption=f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å–µ–Ω–Ω–∏—Ö –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ {AUTUMN_FOOD_PRICE}üçÇ.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_shop")]]
            ),
        )
        return
    
    update_user(
        uid,
        autumn_coins=autumn_coins - AUTUMN_FOOD_PRICE,
        autumn_feed=user["autumn_feed"] + 1,
    )
    
    log_user_action(uid, f"–ö—É–ø–∏–ª –æ—Å–µ–Ω–Ω–∏–π –∫–æ—Ä–º –∑–∞ {AUTUMN_FOOD_PRICE}üçÇ")
    
    await edit_section(
        query,
        caption=f"‚úÖ +1 –æ—Å–µ–Ω–Ω–∏–π –∫–æ—Ä–º –∑–∞ {AUTUMN_FOOD_PRICE}üçÇ.",
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_shop")]]
        ),
    )


async def buy_autumn_mask(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫—É–ø–∫–∞ —Ç—ã–∫–≤–µ–Ω–Ω–æ–π –º–∞—Å–∫–∏."""
    uid = query.from_user.id
    user = get_user(uid)
    
    if user["coins"] < 5000:
        await edit_section(
            query,
            caption="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ 5000ü™ô.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_shop")]]
            ),
        )
        return
    
    update_user(uid, coins=user["coins"] - 5000)
    log_user_action(uid, "–ö—É–ø–∏–ª —Ç—ã–∫–≤–µ–Ω–Ω—É—é –º–∞—Å–∫—É –∑–∞ 5000ü™ô")
    
    await edit_section(
        query,
        caption="‚úÖ –¢—ã–∫–≤–µ–Ω–Ω–∞—è –º–∞—Å–∫–∞ –∫—É–ø–ª–µ–Ω–∞! +5% –∫ –¥–æ—Ö–æ–¥—É.",
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_shop")]]
        ),
    )


async def buy_autumn_soup(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫—É–ø–∫–∞ –≥—Ä–∏–±–Ω–æ–≥–æ —Å—É–ø–∞."""
    uid = query.from_user.id
    user = get_user(uid)
    
    if user["coins"] < 3000:
        await edit_section(
            query,
            caption="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ 3000ü™ô.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_shop")]]
            ),
        )
        return
    
    update_user(uid, coins=user["coins"] - 3000)
    log_user_action(uid, "–ö—É–ø–∏–ª –≥—Ä–∏–±–Ω–æ–π —Å—É–ø –∑–∞ 3000ü™ô")
    
    await edit_section(
        query,
        caption="‚úÖ –ì—Ä–∏–±–Ω–æ–π —Å—É–ø –∫—É–ø–ª–µ–Ω! –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –ø–∏—Ç–æ–º—Ü–µ–≤.",
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_shop")]]
        ),
    )


async def buy_autumn_cake(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫—É–ø–∫–∞ –æ—Ä–µ—Ö–æ–≤–æ–≥–æ —Ç–æ—Ä—Ç–∞."""
    uid = query.from_user.id
    user = get_user(uid)
    
    if user["coins"] < 4000:
        await edit_section(
            query,
            caption="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ 4000ü™ô.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_shop")]]
            ),
        )
        return
    
    update_user(uid, coins=user["coins"] - 4000)
    log_user_action(uid, "–ö—É–ø–∏–ª –æ—Ä–µ—Ö–æ–≤—ã–π —Ç–æ—Ä—Ç –∑–∞ 4000ü™ô")
    
    await edit_section(
        query,
        caption="‚úÖ –û—Ä–µ—Ö–æ–≤—ã–π —Ç–æ—Ä—Ç –∫—É–ø–ª–µ–Ω! –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–∞—Å—Ç—å–µ –ø–∏—Ç–æ–º—Ü–µ–≤.",
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_shop")]]
        ),
    )


async def buy_autumn_wreath(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫—É–ø–∫–∞ –æ—Å–µ–Ω–Ω–µ–≥–æ –≤–µ–Ω–∫–∞."""
    uid = query.from_user.id
    user = get_user(uid)
    
    if user["coins"] < 7000:
        await edit_section(
            query,
            caption="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ 7000ü™ô.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_shop")]]
            ),
        )
        return
    
    update_user(uid, coins=user["coins"] - 7000)
    log_user_action(uid, "–ö—É–ø–∏–ª –æ—Å–µ–Ω–Ω–∏–π –≤–µ–Ω–æ–∫ –∑–∞ 7000ü™ô")
    
    await edit_section(
        query,
        caption="‚úÖ –û—Å–µ–Ω–Ω–∏–π –≤–µ–Ω–æ–∫ –∫—É–ø–ª–µ–Ω! +3% –∫ –¥–æ—Ö–æ–¥—É.",
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_shop")]]
        ),
    )


async def buy_autumn_antlers(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫—É–ø–∫–∞ —Ä–æ–≥–æ–≤ –æ–ª–µ–Ω—è."""
    uid = query.from_user.id
    user = get_user(uid)
    
    if user["coins"] < 15000:
        await edit_section(
            query,
            caption="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ 15000ü™ô.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_shop")]]
            ),
        )
        return
    
    update_user(uid, coins=user["coins"] - 15000)
    log_user_action(uid, "–ö—É–ø–∏–ª —Ä–æ–≥–∞ –æ–ª–µ–Ω—è –∑–∞ 15000ü™ô")
    
    await edit_section(
        query,
        caption="‚úÖ –†–æ–≥–∞ –æ–ª–µ–Ω—è –∫—É–ø–ª–µ–Ω—ã! +10% –∫ –¥–æ—Ö–æ–¥—É.",
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_shop")]]
        ),
    )


# –ù–æ–≤—ã–µ –æ—Å–µ–Ω–Ω–∏–µ –∏–≥—Ä—ã
async def autumn_game_wheat(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–≥—Ä–∞ '–£—Ä–æ–∂–∞–π –∑–µ—Ä–Ω–∞'."""
    uid = query.from_user.id
    user = get_user(uid)
    
    if user["coins"] < 5000:
        await edit_section(
            query,
            caption="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ 5000ü™ô.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_games")]]
            ),
        )
        return
    
    # –ò–≥—Ä–∞: —Å–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π
    crops = ["–ø—à–µ–Ω–∏—Ü–∞", "—Ä–æ–∂—å", "–æ–≤–µ—Å", "—è—á–º–µ–Ω—å"]
    correct_crop = random.choice(crops)
    
    text = (
        f"üåæ –£—Ä–æ–∂–∞–π –∑–µ—Ä–Ω–∞\n\n"
        f"–ö–∞–∫–æ–µ –∑–µ—Ä–Ω–æ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å?\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(crops)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∑–µ—Ä–Ω–æ:"
    )
    
    context.user_data["autumn_game"] = {
        "type": "wheat",
        "correct": correct_crop,
        "cost": 5000,
        "reward": 10000
    }
    
    await edit_section(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="autumn_games")]]
        ),
    )


async def autumn_game_apple(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–≥—Ä–∞ '–Ø–±–ª–æ—á–Ω—ã–π —Å–∞–¥'."""
    uid = query.from_user.id
    user = get_user(uid)
    
    if user["coins"] < 6000:
        await edit_section(
            query,
            caption="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ 6000ü™ô.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_games")]]
            ),
        )
        return
    
    # –ò–≥—Ä–∞: —Å–æ–±—Ä–∞—Ç—å —è–±–ª–æ–∫–∏
    apple_types = ["–∞–Ω—Ç–æ–Ω–æ–≤–∫–∞", "–≥–æ–ª–¥–µ–Ω", "–≥—Ä–µ–Ω–Ω–∏", "—Ñ—É–¥–∂–∏"]
    correct_apple = random.choice(apple_types)
    
    text = (
        f"üçé –Ø–±–ª–æ—á–Ω—ã–π —Å–∞–¥\n\n"
        f"–ö–∞–∫–∏–µ —è–±–ª–æ–∫–∏ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å?\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(apple_types)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å–æ—Ä—Ç:"
    )
    
    context.user_data["autumn_game"] = {
        "type": "apple",
        "correct": correct_apple,
        "cost": 6000,
        "reward": 12000
    }
    
    await edit_section(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="autumn_games")]]
        ),
    )


async def autumn_game_squirrel(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–≥—Ä–∞ '–ë–µ–ª–∏—á—å—è –æ—Ö–æ—Ç–∞'."""
    uid = query.from_user.id
    user = get_user(uid)
    
    if user["coins"] < 7000:
        await edit_section(
            query,
            caption="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ 7000ü™ô.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_games")]]
            ),
        )
        return
    
    # –ò–≥—Ä–∞: –ø–æ–º–æ—á—å –±–µ–ª–∫–µ –Ω–∞–π—Ç–∏ –æ—Ä–µ—Ö–∏
    nuts = ["—Ñ—É–Ω–¥—É–∫", "–≥—Ä–µ—Ü–∫–∏–π", "–∫–µ–¥—Ä–æ–≤—ã–π", "–º–∏–Ω–¥–∞–ª—å"]
    correct_nut = random.choice(nuts)
    
    text = (
        f"üå∞ –ë–µ–ª–∏—á—å—è –æ—Ö–æ—Ç–∞\n\n"
        f"–ö–∞–∫–∏–µ –æ—Ä–µ—Ö–∏ –∏—â–µ—Ç –±–µ–ª–∫–∞?\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(nuts)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –æ—Ä–µ—Ö:"
    )
    
    context.user_data["autumn_game"] = {
        "type": "squirrel",
        "correct": correct_nut,
        "cost": 7000,
        "reward": 14000
    }
    
    await edit_section(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="autumn_games")]]
        ),
    )


async def autumn_game_wind(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–≥—Ä–∞ '–û—Å–µ–Ω–Ω–∏–π –≤–µ—Ç–µ—Ä'."""
    uid = query.from_user.id
    user = get_user(uid)
    
    if user["coins"] < 8000:
        await edit_section(
            query,
            caption="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ 8000ü™ô.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_games")]]
            ),
        )
        return
    
    # –ò–≥—Ä–∞: —É–≥–∞–¥–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞
    directions = ["—Å–µ–≤–µ—Ä", "—é–≥", "–≤–æ—Å—Ç–æ–∫", "–∑–∞–ø–∞–¥"]
    correct_direction = random.choice(directions)
    
    text = (
        f"üçÇ –û—Å–µ–Ω–Ω–∏–π –≤–µ—Ç–µ—Ä\n\n"
        f"–í –∫–∞–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥—É–µ—Ç –≤–µ—Ç–µ—Ä?\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(directions)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    )
    
    context.user_data["autumn_game"] = {
        "type": "wind",
        "correct": correct_direction,
        "cost": 8000,
        "reward": 16000
    }
    
    await edit_section(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="autumn_games")]]
        ),
    )


async def autumn_game_eagle(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–≥—Ä–∞ '–û—Ä–ª–∏–Ω—ã–π –ø–æ–ª–µ—Ç'."""
    uid = query.from_user.id
    user = get_user(uid)
    
    if user["coins"] < 10000:
        await edit_section(
            query,
            caption="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ 10000ü™ô.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_games")]]
            ),
        )
        return
    
    # –ò–≥—Ä–∞: –ø–æ–º–æ—á—å –æ—Ä–ª—É –Ω–∞–π—Ç–∏ –¥–æ–±—ã—á—É
    prey = ["–∑–∞—è—Ü", "–º—ã—à—å", "—Ä—ã–±–∞", "–∑–º–µ—è"]
    correct_prey = random.choice(prey)
    
    text = (
        f"ü¶Ö –û—Ä–ª–∏–Ω—ã–π –ø–æ–ª–µ—Ç\n\n"
        f"–ö–∞–∫—É—é –¥–æ–±—ã—á—É –∏—â–µ—Ç –æ—Ä–µ–ª?\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(prey)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –¥–æ–±—ã—á—É:"
    )
    
    context.user_data["autumn_game"] = {
        "type": "eagle",
        "correct": correct_prey,
        "cost": 10000,
        "reward": 20000
    }
    
    await edit_section(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="autumn_games")]]
        ),
    )


async def autumn_game_stars(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–≥—Ä–∞ '–û—Å–µ–Ω–Ω—è—è –Ω–æ—á—å'."""
    uid = query.from_user.id
    user = get_user(uid)
    
    if user["coins"] < 12000:
        await edit_section(
            query,
            caption="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ 12000ü™ô.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_games")]]
            ),
        )
        return
    
    # –ò–≥—Ä–∞: –Ω–∞–π—Ç–∏ —Å–æ–∑–≤–µ–∑–¥–∏—è
    constellations = ["–±–æ–ª—å—à–∞—è –º–µ–¥–≤–µ–¥–∏—Ü–∞", "–º–∞–ª–∞—è –º–µ–¥–≤–µ–¥–∏—Ü–∞", "–æ—Ä–∏–æ–Ω", "–∫–∞—Å—Å–∏–æ–ø–µ—è"]
    correct_constellation = random.choice(constellations)
    
    text = (
        f"üåô –û—Å–µ–Ω–Ω—è—è –Ω–æ—á—å\n\n"
        f"–ö–∞–∫–æ–µ —Å–æ–∑–≤–µ–∑–¥–∏–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏?\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(constellations)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–∑–≤–µ–∑–¥–∏–µ:"
    )
    
    context.user_data["autumn_game"] = {
        "type": "stars",
        "correct": correct_constellation,
        "cost": 12000,
        "reward": 24000
    }
    
    await edit_section(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="autumn_games")]]
        ),
    )