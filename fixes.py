"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ main.py
"""
import sqlite3
import time
import random
from typing import List, Optional, Tuple
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram import InputMediaPhoto

# –û—Å–µ–Ω–Ω–∏–µ –∏–≥—Ä—ã
AUTUMN_GAMES = [
    {
        "name": "üçÇ –£–≥–∞–¥–∞–π –ª–∏—Å—Ç",
        "description": "–£–≥–∞–¥–∞–π—Ç–µ —Ü–≤–µ—Ç –æ—Å–µ–Ω–Ω–µ–≥–æ –ª–∏—Å—Ç–∞",
        "cost": 1000,
        "reward": 2000,
        "callback": "autumn_game_leaf"
    },
    {
        "name": "üéÉ –¢—ã–∫–≤–µ–Ω–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è",
        "description": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—ã–∫–≤—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É",
        "cost": 2000,
        "reward": 5000,
        "callback": "autumn_game_pumpkin"
    },
    {
        "name": "üçÅ –°–æ–±–µ—Ä–∏ –ª–∏—Å—Ç—å—è",
        "description": "–°–æ–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –ª–∏—Å—Ç—å–µ–≤",
        "cost": 1500,
        "reward": 3000,
        "callback": "autumn_game_collect"
    },
    {
        "name": "üå∞ –û—Ä–µ—Ö–æ–≤–∞—è –æ—Ö–æ—Ç–∞",
        "description": "–ù–∞–π–¥–∏—Ç–µ —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–µ –æ—Ä–µ—Ö–∏",
        "cost": 2500,
        "reward": 6000,
        "callback": "autumn_game_nuts"
    },
    {
        "name": "üçÑ –ì—Ä–∏–±–Ω–∞—è –ø–æ–ª—è–Ω–∞",
        "description": "–°–æ–±–µ—Ä–∏—Ç–µ —Å—ä–µ–¥–æ–±–Ω—ã–µ –≥—Ä–∏–±—ã",
        "cost": 3000,
        "reward": 7500,
        "callback": "autumn_game_mushrooms"
    },
    {
        "name": "üåßÔ∏è –î–æ–∂–¥–µ–≤–∞—è –º–∞–≥–∏—è",
        "description": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–≥–∏—é –¥–æ–∂–¥—è",
        "cost": 4000,
        "reward": 10000,
        "callback": "autumn_game_rain"
    }
]

# –û—Å–µ–Ω–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω
AUTUMN_SHOP = [
    {
        "name": "üçÇ –û—Å–µ–Ω–Ω–∏–π –∫–æ—Ä–º",
        "description": "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ—Ä–º –¥–ª—è –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–∑–æ–Ω–∞",
        "price": 1000,
        "type": "feed",
        "amount": 1
    },
    {
        "name": "üéÉ –¢—ã–∫–≤–µ–Ω–Ω–∞—è –º–∞—Å–∫–∞",
        "description": "–ú–∞—Å–∫–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∑–ª—ã—Ö –¥—É—Ö–æ–≤",
        "price": 5000,
        "type": "decoration",
        "amount": 1
    },
    {
        "name": "üçÅ –í–µ–Ω–æ–∫ –∏–∑ –ª–∏—Å—Ç—å–µ–≤",
        "description": "–ö—Ä–∞—Å–∏–≤—ã–π –≤–µ–Ω–æ–∫ –¥–ª—è —É–∫—Ä–∞—à–µ–Ω–∏—è —Ñ–µ—Ä–º—ã",
        "price": 3000,
        "type": "decoration",
        "amount": 1
    },
    {
        "name": "üå∞ –ú–µ—à–æ–∫ –æ—Ä–µ—Ö–æ–≤",
        "description": "–ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ä–µ—Ö–∏ –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤",
        "price": 2000,
        "type": "feed",
        "amount": 3
    },
    {
        "name": "üçÑ –ì—Ä–∏–±–Ω–æ–π —Å—É–ø",
        "description": "–í–∫—É—Å–Ω—ã–π —Å—É–ø –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏",
        "price": 4000,
        "type": "boost",
        "amount": 1
    }
]


def get_autumn_daily_reward(user_id: int, get_user_func, update_user_func, log_user_action_func) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –≤—ã–¥–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É"""
    user = get_user_func(user_id)
    now = int(time.time())
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É —Å sqlite3.Row
    last_daily = user.get("last_autumn_daily", 0) if hasattr(user, 'get') else user["last_autumn_daily"] if "last_autumn_daily" in user.keys() else 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞
    if now - last_daily < 86400:  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        return False
    
    # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
    reward = random.randint(1000, 5000)
    update_user_func(
        user_id,
        coins=user["coins"] + reward,
        last_autumn_daily=now
    )
    
    log_user_action_func(user_id, f"–ü–æ–ª—É—á–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Å–µ–Ω–Ω—é—é –Ω–∞–≥—Ä–∞–¥—É: {reward} –º–æ–Ω–µ—Ç")
    return True


async def autumn_portal_menu(query, context: ContextTypes.DEFAULT_TYPE, 
                           get_user_func, update_user_func, edit_section_func, 
                           chunk_buttons_func, format_num_func, is_admin_func) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Å–µ–Ω–Ω–µ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞"""
    uid = query.from_user.id
    user = get_user_func(uid)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
    import sqlite3
    conn = sqlite3.connect("farm_bot.db")
    cur = conn.cursor()
    cur.execute("SELECT autumn_event_active FROM global_settings WHERE id = 1")
    active = cur.fetchone()["autumn_event_active"]
    conn.close()
    
    if not active:
        await edit_section_func(
            query,
            caption="üçÇ –û—Å–µ–Ω–Ω–∏–π –ø–æ—Ä—Ç–∞–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
            image_key="autumn",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
            ),
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
    daily_available = get_autumn_daily_reward(uid, get_user_func, update_user_func, lambda x, y: None)
    daily_text = "üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!" if daily_available else "‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞–≤—Ç—Ä–∞"
    
    text = (
        f"üçÇ –û—Å–µ–Ω–Ω–∏–π –ø–æ—Ä—Ç–∞–ª\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –æ—Å–µ–Ω–Ω–µ–π –º–∞–≥–∏–∏!\n\n"
        f"üí∞ –í–∞—à–∏ –æ—Å–µ–Ω–Ω–∏–µ –º–æ–Ω–µ—Ç—ã: {format_num_func(user.get('autumn_coins', 0))}\n"
        f"{daily_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    )
    
    btns = [
        InlineKeyboardButton("üéÆ –û—Å–µ–Ω–Ω–∏–µ –∏–≥—Ä—ã", callback_data="autumn_games"),
        InlineKeyboardButton("üõí –û—Å–µ–Ω–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω", callback_data="autumn_shop"),
        InlineKeyboardButton("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã", callback_data="autumn_daily"),
        InlineKeyboardButton("üîÑ –û–±–º–µ–Ω –º–æ–Ω–µ—Ç", callback_data="autumn_exchange"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="autumn_stats"),
    ]
    
    await edit_section_func(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(chunk_buttons_func(btns, per_row=2)),
    )


async def autumn_games_menu(query, context: ContextTypes.DEFAULT_TYPE, 
                          edit_section_func, chunk_buttons_func, format_num_func) -> None:
    """–ú–µ–Ω—é –æ—Å–µ–Ω–Ω–∏—Ö –∏–≥—Ä"""
    text = "üéÆ –û—Å–µ–Ω–Ω–∏–µ –∏–≥—Ä—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –∏–≥—Ä—ã:"
    
    btns = []
    for game in AUTUMN_GAMES:
        btns.append(
            InlineKeyboardButton(
                f"{game['name']} ({format_num_func(game['cost'])}ü™ô)",
                callback_data=game['callback']
            )
        )
    
    btns.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_portal"))
    
    await edit_section_func(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(chunk_buttons_func(btns, per_row=1)),
    )


async def autumn_shop_menu(query, context: ContextTypes.DEFAULT_TYPE, 
                         edit_section_func, chunk_buttons_func, format_num_func) -> None:
    """–ú–µ–Ω—é –æ—Å–µ–Ω–Ω–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞"""
    text = "üõí –û—Å–µ–Ω–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"
    
    btns = []
    for item in AUTUMN_SHOP:
        btns.append(
            InlineKeyboardButton(
                f"{item['name']} ({format_num_func(item['price'])}ü™ô)",
                callback_data=f"autumn_buy_{item['type']}_{item['amount']}"
            )
        )
    
    btns.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_portal"))
    
    await edit_section_func(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(chunk_buttons_func(btns, per_row=1)),
    )


async def autumn_daily_section(query, context: ContextTypes.DEFAULT_TYPE, 
                             get_user_func, edit_section_func, chunk_buttons_func) -> None:
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã"""
    uid = query.from_user.id
    user = get_user_func(uid)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É —Å sqlite3.Row
    last_daily = user.get("last_autumn_daily", 0) if hasattr(user, 'get') else user["last_autumn_daily"] if "last_autumn_daily" in user.keys() else 0
    now = int(time.time())
    
    if now - last_daily < 86400:
        left = 86400 - (now - last_daily)
        hours = left // 3600
        minutes = (left % 3600) // 60
        
        text = (
            f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã\n\n"
            f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —á–µ—Ä–µ–∑: {hours}—á {minutes}–º\n\n"
            f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –ø–æ–ª—É—á–∞–π—Ç–µ –æ—Ç 1000 –¥–æ 5000 –º–æ–Ω–µ—Ç!"
        )
    else:
        text = (
            f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã\n\n"
            f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É."
        )
    
    btns = []
    if now - last_daily >= 86400:
        btns.append(InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É", callback_data="autumn_claim_daily"))
    
    btns.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_portal"))
    
    await edit_section_func(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(chunk_buttons_func(btns, per_row=1)),
    )


async def autumn_exchange_menu(query, context: ContextTypes.DEFAULT_TYPE, 
                             get_user_func, edit_section_func, chunk_buttons_func, format_num_func) -> None:
    """–û–±–º–µ–Ω –º–æ–Ω–µ—Ç"""
    uid = query.from_user.id
    user = get_user_func(uid)
    
    text = (
        f"üîÑ –û–±–º–µ–Ω –º–æ–Ω–µ—Ç\n\n"
        f"üí∞ –í–∞—à–∏ –º–æ–Ω–µ—Ç—ã: {format_num_func(user['coins'])}\n"
        f"üçÇ –û—Å–µ–Ω–Ω–∏–µ –º–æ–Ω–µ—Ç—ã: {format_num_func(user.get('autumn_coins', 0))}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±–º–µ–Ω–∞:"
    )
    
    btns = [
        InlineKeyboardButton("ü™ô ‚Üí üçÇ (1:1)", callback_data="autumn_exchange_to_autumn"),
        InlineKeyboardButton("üçÇ ‚Üí ü™ô (1:1)", callback_data="autumn_exchange_to_normal"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_portal"),
    ]
    
    await edit_section_func(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(chunk_buttons_func(btns, per_row=1)),
    )


async def handle_autumn_game(query, context: ContextTypes.DEFAULT_TYPE, game_type: str,
                           get_user_func, update_user_func, edit_section_func, 
                           chunk_buttons_func, format_num_func, log_user_action_func) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–µ–Ω–Ω–∏—Ö –∏–≥—Ä"""
    uid = query.from_user.id
    user = get_user_func(uid)
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É
    game = None
    for g in AUTUMN_GAMES:
        if g["callback"] == f"autumn_game_{game_type}":
            game = g
            break
    
    if not game:
        await edit_section_func(query, caption="‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", image_key="autumn")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–æ–Ω–µ—Ç
    if user["coins"] < game["cost"]:
        await edit_section_func(
            query,
            caption=f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ {format_num_func(game['cost'])}ü™ô.",
            image_key="autumn"
        )
        return
    
    # –ò–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É
    success = random.choice([True, True, True, False])  # 75% —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞
    
    if success:
        # –í—ã–∏–≥—Ä—ã—à
        reward = game["reward"]
        update_user_func(
            uid,
            coins=user["coins"] - game["cost"] + reward,
            weekly_coins=user["weekly_coins"] + reward
        )
        
        text = (
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n"
            f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {format_num_func(reward)}ü™ô!\n"
            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_num_func(game['cost'])}ü™ô\n"
            f"–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {format_num_func(reward - game['cost'])}ü™ô"
        )
        
        log_user_action_func(uid, f"–í—ã–∏–≥—Ä–∞–ª –≤ –∏–≥—Ä–µ {game['name']}: {reward} –º–æ–Ω–µ—Ç")
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        update_user_func(uid, coins=user["coins"] - game["cost"])
        
        text = (
            f"üòî –ù–µ –ø–æ–≤–µ–∑–ª–æ!\n\n"
            f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {format_num_func(game['cost'])}ü™ô.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
        )
        
        log_user_action_func(uid, f"–ü—Ä–æ–∏–≥—Ä–∞–ª –≤ –∏–≥—Ä–µ {game['name']}: {game['cost']} –º–æ–Ω–µ—Ç")
    
    btns = [
        InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=game["callback"]),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="autumn_games"),
    ]
    
    await edit_section_func(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(chunk_buttons_func(btns, per_row=1)),
    )


async def handle_autumn_buy(query, context: ContextTypes.DEFAULT_TYPE, item_type: str, amount: int,
                          get_user_func, update_user_func, edit_section_func, 
                          chunk_buttons_func, format_num_func, log_user_action_func) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –≤ –æ—Å–µ–Ω–Ω–µ–º –º–∞–≥–∞–∑–∏–Ω–µ"""
    uid = query.from_user.id
    user = get_user_func(uid)
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä
    item = None
    for i in AUTUMN_SHOP:
        if i["type"] == item_type and i["amount"] == amount:
            item = i
            break
    
    if not item:
        await edit_section_func(query, caption="‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", image_key="autumn")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–æ–Ω–µ—Ç
    if user["coins"] < item["price"]:
        await edit_section_func(
            query,
            caption=f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ {format_num_func(item['price'])}ü™ô.",
            image_key="autumn"
        )
        return
    
    # –ü–æ–∫—É–ø–∞–µ–º —Ç–æ–≤–∞—Ä
    if item_type == "feed":
        update_user_func(
            uid,
            coins=user["coins"] - item["price"],
            autumn_feed=user.get("autumn_feed", 0) + amount
        )
        text = f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {amount} —à—Ç. {item['name']} –∑–∞ {format_num_func(item['price'])}ü™ô."
    elif item_type == "decoration":
        update_user_func(uid, coins=user["coins"] - item["price"])
        text = f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {item['name']} –∑–∞ {format_num_func(item['price'])}ü™ô."
    elif item_type == "boost":
        update_user_func(uid, coins=user["coins"] - item["price"])
        text = f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {item['name']} –∑–∞ {format_num_func(item['price'])}ü™ô."
    
    log_user_action_func(uid, f"–ö—É–ø–∏–ª –≤ –æ—Å–µ–Ω–Ω–µ–º –º–∞–≥–∞–∑–∏–Ω–µ: {item['name']}")
    
    btns = [
        InlineKeyboardButton("üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="autumn_shop"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_portal"),
    ]
    
    await edit_section_func(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(chunk_buttons_func(btns, per_row=1)),
    )


async def handle_autumn_exchange(query, context: ContextTypes.DEFAULT_TYPE, exchange_type: str,
                               get_user_func, update_user_func, edit_section_func, 
                               chunk_buttons_func, format_num_func, log_user_action_func) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–º–µ–Ω–∞ –º–æ–Ω–µ—Ç"""
    uid = query.from_user.id
    user = get_user_func(uid)
    
    if exchange_type == "to_autumn":
        # –û–±—ã—á–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –≤ –æ—Å–µ–Ω–Ω–∏–µ
        if user["coins"] < 1000:
            await edit_section_func(
                query,
                caption="‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞: 1000ü™ô.",
                image_key="autumn"
            )
            return
        
        exchange_amount = min(user["coins"], 10000)  # –ú–∞–∫—Å–∏–º—É–º 10000 –∑–∞ —Ä–∞–∑
        update_user_func(
            uid,
            coins=user["coins"] - exchange_amount,
            autumn_coins=user.get("autumn_coins", 0) + exchange_amount
        )
        
        text = f"‚úÖ –û–±–º–µ–Ω–µ–Ω–æ {format_num_func(exchange_amount)}ü™ô –Ω–∞ –æ—Å–µ–Ω–Ω–∏–µ –º–æ–Ω–µ—Ç—ã."
        
    elif exchange_type == "to_normal":
        # –û—Å–µ–Ω–Ω–∏–µ –º–æ–Ω–µ—Ç—ã –≤ –æ–±—ã—á–Ω—ã–µ
        autumn_coins = user.get("autumn_coins", 0)
        if autumn_coins < 1000:
            await edit_section_func(
                query,
                caption="‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞: 1000üçÇ.",
                image_key="autumn"
            )
            return
        
        exchange_amount = min(autumn_coins, 10000)  # –ú–∞–∫—Å–∏–º—É–º 10000 –∑–∞ —Ä–∞–∑
        update_user_func(
            uid,
            coins=user["coins"] + exchange_amount,
            autumn_coins=autumn_coins - exchange_amount
        )
        
        text = f"‚úÖ –û–±–º–µ–Ω–µ–Ω–æ {format_num_func(exchange_amount)}üçÇ –Ω–∞ –æ–±—ã—á–Ω—ã–µ –º–æ–Ω–µ—Ç—ã."
    
    log_user_action_func(uid, f"–û–±–º–µ–Ω –º–æ–Ω–µ—Ç: {exchange_type}")
    
    btns = [
        InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±–º–µ–Ω", callback_data="autumn_exchange"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_portal"),
    ]
    
    await edit_section_func(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(chunk_buttons_func(btns, per_row=1)),
    )


async def handle_autumn_claim_daily(query, context: ContextTypes.DEFAULT_TYPE,
                                  get_user_func, update_user_func, edit_section_func, 
                                  chunk_buttons_func, log_user_action_func) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã"""
    uid = query.from_user.id
    
    if get_autumn_daily_reward(uid, get_user_func, update_user_func, log_user_action_func):
        text = (
            f"üéâ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–ª—É—á–∞–π–Ω—É—é —Å—É–º–º—É –º–æ–Ω–µ—Ç.\n"
            f"–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π!"
        )
    else:
        text = "‚ùå –ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!"
    
    btns = [
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autumn_daily"),
    ]
    
    await edit_section_func(
        query,
        caption=text,
        image_key="autumn",
        reply_markup=InlineKeyboardMarkup(chunk_buttons_func(btns, per_row=1)),
    )